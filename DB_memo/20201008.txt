@ Data란?
-> 어떠한 자료 혹은 실제 값을 의미
ex) 에베레스트의 높이 : 8848m(8848m 라는 데이터가 존재)

@ 정보란?
-> 데이터를 기반으로 하여 의미를 부여한 것
ex) 에베레스트는 세계에서 가장 높은 산 (가장 높은 산이라는 정보가 부여 됨)

@ DB(DataBase)란?
-> 한 조직에 필요한 정보를 여러 응요 시스템에서 공용할 수 있도록 논리적으로
    연관된 데이터를 모으고, 중복되는 데이터를 최소화하여 구조적으로 통합 / 저장해 놓은 것

@ DB(DataBase)의 특징
1. 실시간 접근성
-> 사용자가 데이터를 요청하면 실시간으로 결과를 서비스

2. 지속적인 변환
-> 데이터 값은 실시간적으로 항상 바뀔 수 있음

3. 동시 공유
-> 데이터베이스는 서로 다른 업무 또는 여러 사용자에게 동시 공유

@ DBMS(Database Management System) - Oracle
-> 데이터베이스에서 데이터를 추출, 조작, 정의, 제어 등을 손 쉽게 할 수 있게 해주는
    데이터베이스 전용 관리 프로그램

@ DBMS의 기능
-> 데이터 추출 : 사용자가 데이터를 조회하거나 응용프로그램의 데이터를 추출(ex. 검색)
-> 데이터 조작 : 데이터를 조작, 요청하는 데이터의 삽입, 수정, 삭제 작업(ex. 추가, 수정, 삭제)
-> 데이터 정의 : 데이터의 구조를 정의하고 데이터의 저장공간을 정의하는 작업(ex. 테이블 생성, DB생성)
-> 데이터 제어 : 데이터베이스 사용자를 생성하고, 모니터링하며 접근을 제어한다.
	         데이터베이스의 백업과 회복, 동시성 등 여러 기능을 제공
	         (ex. 사용자(관리자) 추가 및 데이터 손실, 오류 복구 등)

@ DBMS 의 기본적인 구조

		     →	테이블   - 데이터 데이터 데이터
		   ↗
		DB →→ 테이블	 - 데이터 데이터 데이터
	      ↗   ↘
	    ↗	     →	테이블	 - 데이터 데이터 데이터
	DBMS
	    ↘	     →	테이블	 - 데이터 데이터 데이터
	      ↘  ↗	
		DB →→ 테이블	 - 데이터 데이터 데이터
		  ↘
		     →	테이블	 - 데이터 데이터 데이터
※ 즉, 수많은 데이터는 테이블에 담기고, 테이블들은 DB안에 담겨 있음
   그리고 수많은 DB들은 DBMS가 관리 한다.

@ DBMS 종류
-> Oracle, MSSQL, MYSQL, MariaDB, MongoDB 등 다양함

@ Oracle DBMS
-> 미국 오라클사의 관계형 데이터베이스 관리 시스템
-> 국제표준화기구 ㅠㅛ준 구조화 조회 언어와 PL/SQL을 지원
-> 별도의 라이선스 구입 후 사용

@ Oracle DBMS 에디션
-> Enterprise Edition : 기업용
	*가장 강력하고 다양한 기능을 제공
-> Standard Edition : 부서용
	*부서용 인터넷 애플리케이션을 개발, 관리하기 위한 DBMS
-> Personal Edition : 교육이나 클라이언트 작업용
	*데스크탑 컴퓨터용 Oracle DBMS (아주 작은 규모)
-> Lite Edition : 모바일용 DBMS
	*소형 고성능 모듈 방식의 Java를 이용한 DBMS
-> Express Edition : 무료 배포용
	*Express Edition (무료버전) - XE

@ Oracle의 DBMS 구조
				         → 테이블 - 데이터 데이터 데이터
				      ↗
		      →	테이블스페이스→→ 테이블 - 데이터 데이터 데이터
		   ↗		      
		DB →→	테이블스페이스→→ 테이블 - 데이터 데이터 데이터			
	      ↗   		                ↘  
	    ↗	     		       →→ 테이블 - 데이터 데이터 데이터
	DBMS
	    ↘	     →	테이블스페이스→→ 테이블 - 데이터 데이터 데이터
	      ↘  ↗		      ↘
		DB 		         → 테이블 - 데이터 데이터 데이터
		  ↘
		     →	테이블스페이스→→ 테이블 - 데이터 데이터 데이터
				      ↘
				         → 테이블 - 데이터 데이터 데이터

@ SQL이란?
-> Structured Query Language의 약자 (주조화된 질의 언어)
-> 관계형 데이터베이스에서 데이터를 조회하거나 조작하기 위해 사용하는 표준 검색 언어
-> 원하는 데이터를 찾는 방법이나 절차를 기술하는 것이 아닌 조건을 기술하여 작성함
-> DBMS에 따라 사용하는 SQL문법이 조금씩 다름

@ 기본 SQL 문법 종류
-> 데이터 정의어 : DDL(Data Definition Language)
-> 데이터 조작어 : DML(Data Manipulation Language)
-> 데이터 제어어 : DCL(Data Contol Language)
-> 트랜잭션 제어어 : TCL(Transaction Contol Language)

@ DDL
-> 데이터베이스의 구조를 정의하거나 변경, 삭제하기 위해 사용하는 언어
-> 주로 DB관리자 또는 설계자가 사용함
-> CREATE(개체 생성, ALTER(개체 수정), DROP(개체 삭제), TRUNCATE(개체 초기화)
-> DB를 생성/수정/삭제 하거나 TABLED을 생성/수정/삭제 할 수 있음

@ DML
-> Data를 조작하기 위해 사용하는 언어
-> Table의 데이터를 삽입, 수정, 삭제, 조회 등의 동작을 수행함
-> Data를 이용하려는 사용자와 시스템간의 인터페이스를 직접적으로 제공하는 언어
-> 가장 많이 사용 되는 언어
-> INSERT(데이터 삽입), UPDATE(데이터 수정), DELETE(데이터 삭제), SELECT(데이터 검색)
-> SELECT 구문은 DQL(Data Query Language)라고도 한다(데이터를 검색 또는 추출하기 위해 사용되는 언어)

@ DCL
-> 사용자의 권한이나, 관리자 설정 등을 처리 (GRANT(유저권한생성), REVOKE(유저권한삭제))

@ TCL(Transaction Control Language)
-> 트랜잭션 관리 제어 언어
-> COMMIT (트랜잭션 종료 처리 후 저장), ROLLBACK(트랜잭션 취소), SAVEPOINT(임시 저장/포인트 지점 설정)

@ Table의 구조
-> 데이터를 담고 있는 개체
-> Table안에 데이터를 넣고 빼기 위해서는 기본적인 구조를 알아야 함
-> Table은 기본적으로 행과 열을 이용하여 데이터를 표현 함(2차원 표의 형태)

@ DB 데이터 타입
-> DB에서 데이터를 표현하기 위한 데이터 타입

#NUMBER 타입 -> NUMBER([P, S])
 -> P : 표현할 수 있는 전체 자리수(1 ~ 38)
 -> S : 소수점 이하 자리수(-84 ~ 127)
 ex. 1234.6789 이라는 데이터를 입력할 경우 타입에 따른 저장되는 값
 데이터 타입		저장되는 값
 NUMBER			1234.678
 NUMBER(7)		1235
 NUMBER(7, 1)		1234.7
 NUMBER(7, 3)		1234.679
 NUMBER(5, -2)		1200

#CHAR타입 -> CHAR(SIZE[byte | char])
 -> 지정할 크기보다 작은 문자(열)이 입력되고 남는 공간은 공백으로 채움
 -> 데이터는 ' '를 사용하여 표기하고, 대/소문자를 구분함
 ex. 만약 'oracle'이라는 데이터가 들어 있다면?
 CHAR(6)		oracle
 CHAR(9)		oracle(공백 3칸)
 CHAR(3)		에러

 ※CHAR타입은 고정된 크기를 넘어갈 수 없음
 ※oracle express 버전은 한글 문자를 3Byte로 처리 함 (enterprise 버전은 2byte로 처리함)
 ex. 만약 '김치'라는 데이터가 들어 있다면? 
 CHAR(6)		김치
 CHAR(9)		김치(공백 3칸/한글은 1칸)
 CHAR(3)		에러

※CHAR와 NCHAR의 차이점
-> CHAR은 Byte 단위 / NCAHR는 글자수 단위
-> CHAR는 최대 2000Byte까지 가능함
 ex. 만약 NCHAR에 '김치'라는 데이터가 들어 있다면? 
 NCHAR(6)	김치(공백 4칸)
 NCHAR(9)	김치(공백 7칸)
 NCHAR(3)	김치(공백 1칸)

# VARCHAR타입
-> VARCHAR타입은 가변 타입이라고 부름
-> 가변길이가 되어, 최대 길이만큼 사용할 수 있으나 글자수가 적으면 적은만큼 공간을 효율적으로 사용
-> VARCHAR의 최대 길이는 4000byte
ex.) VARCHAR 타입에 만약 'oracle'이라는 데이터가 들어왔다면?
 VARCHAR(6)	oracle
 VARCHAR(9)	oracle
 BARCHAR(5)	oracle(엄격모드시 에러)

# NVARCHAR타입
-> 바이트 단위가 아닌 글자수 단위의 가변길이

# DATE
-> 일자(년/월/일) 및 시간(시/분/초) 정보를 관리하는 타입
-> 기본적으로 화면에 년/월/일 정보만 표기 됨
-> 날짜의 연산 및 비교가 가능 함
ex [연산]		[결과타입]	[설명]
    날짜+숫자	DATE		작성한 숫자만큼 며칠 후를 의미
    날짜-숫자	DATE		작성한 숫자만큼 며칠 전를 의미
    날짜-날짜	NUMBER		두 날짜간의 차이 일 수
    날짜-숫자/24	DATE		날짜 + 시간의 의미

@ DQL (Data Query Language)
-> 데이터를 검색하기 위해 사용되는 언어
-> DQL은 DML에 속한 언어이기도 함(SELECT)
-> 데이터를 조회한 결과를 Result Set 이라고 함 -> SELECT 구문에 의해 반환된 행들의 집합을 의미
-> Result Set은 0개 이상의 행이 포함될 수 있음
-> Result Set은 특정한 기준에 의해 정렬 될 수 있음
-> 특정 컬럼이나 특정 행을 조회할 수 있으며, 여러 테이블에서 특정 행/컬럼을 조회할 수 있음

@ SELECT 구문 작성법
1. SELECT 컬럼명 FROM 테이블명;
2. SELECT 컬럼명 FROM 테이블명 WHERE 조건;
-> SELECT : 조회하고자 하는 컬럼명을 기술
	   여러개의 컬럼을 기술하고 한다면 쉼표로 구분하고 모든 컬럼을 조회할 경우 *을 사용
-> FROM : 조회 대상 컬럼이 포함된 테이블명을 기술
-> WHERE : 행을 선택하는 조건을 기술
	   여러 개의 제한 조건을 포함할 수 있으며, 각각의 제한조건은 논리연산자로 연결함
	   제한 조건을 만족시키는 행들만 Result Set에 포함

@ SELECT에서 컬럼 값 산술 연산하기
-> 컬럼 값에 대해 산술 연산한 결과를 조회할 수 있음
ex) SELECT EMP_NAME, SALARY*12 FROM EMPLOYEE;

@ 컬럼 별칭
-> 'AS + 원하는 별칭'을 기술하여 컬럼별 별칭을 표현할 수 있음

@ 리터럴
-> 임의로 지정한 문자열을 SELECT 절에 사용하면, 테이블에 존재하는 데이터처럼 사용 가능

@ DISTINCT
-> 컬럼에 포함된 중복 값을 한번씩만 표현하고자 할 때 사용 됨

@ 비교 연산자
-> 표현식 사이의 관계를 비교하기 위해 사용하고, 비교 결과는 논리 결과 중에 하나(TRUE, FALSE, NULL)가 됨
-> 단, 비교하는 두컬럼 값/ 표현식은 서로 동일한 데이터 타입이어야 한다.

연산자			설명
=			같다
<,>			작다, 크다
>=,<=			크거나 같다, 작거나 같다
<>, !=, ^=		같지 않다
BETWEEN AND		특정 범위에 포함되는지 비교
LIKE, NOT LIKE 		문자 패턴 비교
IS NULL, IS NOT NULL	NULL 여부 비교
IN, NOT IN		비교 값을 목록에 포함 또는 미포함 되는지 여부 비교

@ 비교 연산자 - BETWEEN AND
-> 비교하려는 값이 지정한 범위(상한 값과 하한 값의 경계도 포함)에 포함되면 TRUE를 리턴하는 연산자
ex. SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE SALARY BETWEEN 3500000 AND 6000000;

@ 비교 연산자 - LIKE
-> 비교하려는 값이 지정한 특정 패턴을 만족시키면 TRUE를 리턴하는 연산자
-> '%'와 '_'를 와일드카드로 사용할 수 있음
※와일드 : 아무거나 대체해서 사용할 수 있는 것
※LIKE구문에서 _와 %를 문자열로 처리하는 방법 ESCAPE구문 사용
 -> ESCAPE에 사용한 구분자를 사용하여 구분자 뒤에있는 한 문자는 문자열로 처리해 달라는 뜻
 -> SELECT EMP_NAME AS 이름, HIRE_DATE AS 입사일, EMAIL FROM EMPLOYEE WHERE EMAIL LIKE '___#_%' ESCAPE '#';

@ 비교 연산자 - NOT, LIKE
-> -> 비교하려는 값이 지정한 특정 패턴을 만족시키지 않을 때 TRUE를 리턴하는 연산자

@ 논리 연산자 - AND, OR, NOT

@ 연결 연산자
-> 연결 연산자는 || 를 사용하여 여러 컬럼을 하나의 컬럼처럼 연결하거나 컬럼과 리터럴을 연결할 수 있음
ex) SELECT EMP_NAME || '님', SALARY || '원' FROM EMPLOYEE
