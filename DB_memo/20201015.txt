@ 인라인 뷰 (FROM 절에서의 서브쿼리)
-> FROM 절에서 서브쿼리를 사용한 것을 인라인 뷰라고 부름
ex) 
SELECT ED.EMP_NAME, ED.DEPT_TITLE FROM
(SELECT EMP_NAME,DEPT_CODE,DEPT_TITLE
FROM EMPLOYEE LEFT JOIN 
DEPARTMENT ON (DEPT_CODE = DEPT_ID)) ED;

@ TOP-N 분석
-> TOP-N 분석은 컬럼에서 가장 큰 N개의 값 또는 가장 작은 N개의 값을
요청할 때 사용 되는 것
ex) 가장 적게 팔린 제품 TOP 10은?
ex) 회사에서 가장 소득이 많은 사람 TOP 3는?
-> ORACLE에선 ROWNUM을 이용한다.
ex)
SELECT EMP_NAME, SALARY FROM EMPLOYEE
WHERE ROWNUM <=3 ORDER BY SALARY DESC;
-> 이렇게 사용할 경우 where절에서 먼저 행 3개를 자르고 정렬을 수행하기 때문에
정상적인 TOP-N분석을 실행할 수 없다
-> 때문에 인라인뷰를 이용해 먼저 정렬시킨 후 ROWNUM을 이용하여 TOP-N분석을 실행한다.

SELECT * FROM (SELECT EMP_NAME, SALARY FROM EMPLOYEE
ORDER BY SALARY DESC) WHERE ROWNUM <= 3;

->따라서
1. 먼저 TOP-N분석할 속성을 기준으로 테이블을 정렬시키는 쿼리를 작성
2. 위 작성한 쿼리를 인라인뷰에 넣고 전체쿼리의 WHERE절에 ROWNUM 사용

@ WITH
-> 서브쿼리에 이름을 붙여주고, 인라인 뷰로 사용시 서브쿼리의 이름으로
 FROM절에 기술할 수 있음
-> 같은 서브쿼리가 여러번 사용될 경우 중복 작성을 피할 수 있고,
실행속도도 빨라지는 장점이 있다.
ex)
WITH BONUS_LANK AS (SELECT EMP_NAME, SALARY*BONUS 
FROM EMPLOYEE ORDER BY SALARY*BONUS)

SELECT * FROM BONUS_LANK WHERE ROWNUM <=2 ;

@RANK() OVER
-> 중복 순위 다음은 해당 개수만큼 건너뛰고 반환
ex) 1,2,3,4,5,6,6,6,9,10
-> 공동되는 순위가 있으면 똑같이 출력하고 다음 순위를 건너뛰고 출력

ex)
WITH RANK AS (SELECT RANK() OVER(ORDER BY SALARY DESC) AS "순위", 
EMP_NAME, SALARY FROM EMPLOYEE)

SELECT * FROM RANK WHERE "순위" BETWEEN 10 AND 19;

@DENSE_RANK() OVER
-> 공동 순위는 반영하지만 다음 순위는 공동순위 상관없으 다음 순위를 반환
ex). 1,2,3,4,5,6,6,6,7,8,9

@ DDL
-> 데이터 정의언어
-> 객체를 만들고, 수정하고, 삭제하는 구문

@ 오라클 객체의 종류
-> 테이블, 뷰, 시퀀스, 인덱스, 패키지, 프로시져, 함수, 트리거, 동의어 등

@ CREATE TABLE - 테이블 만들기
표현식 : CREATE TABLE 테이블명 (컬럼명 자료형(크기), 컬럼명 자료형(크기), ...)

※ 컬럼 주석달기
-> COMMENT ON COLUMN 테이블명.컬럼명 IS '주석내용';
ex. COMMENT ON COLUMN MEMBERTBL.MEMBER_ID IS '회원아이디';

※ 컬럼 주석 확인하기
SELECT * FROM ALL_COL_COMMENTS
WHERE TABLE_NAME = '테이블명';


@ 제약조건 (Constraints)
-> 테이블 작성시 각 컬럼에 대해 제약 조건을 설정할 수 있음
-> 데이터 무결성을 지키기 위해 제한된 조건
	데이터 무결성 : 데이터의 정확성과 일관성을 유지하기 위한 것

1. NOT NULL : 데이터에 NULL을 허용하지 않음
2. UNIQUE : 중복된 값을 허용하지 않음
3. PRIMARY KEY (기본키) : NULL을 허용하지 않고, 중복 값을 허용하지 않음
		컬럼의 고유 식별자로 사용하기 위함
4. FOREIGN KEY (외래키) : 두 테이블의 데이터 간 연결을 설정하고 강제 적용하여
	외래키 테이블에 저장될 수 있는 데이터를 제어
5. CHECK : 저장 가능한 데이터 값의 범위가 조건을 지정하여 설정한 값만 허용

@ 제약조건 확인하기
SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'MEMBERTBL';

@ NOT NULL
-> 해당 컬럼에 반드시 값이 기록되어야 하는 경우에 사용

@ UNIQUE
-> 컬럼에 입력되는 데이터에 대해 중복을 제한하는 제약 조건
-> 컬럼레벨과 테이블레벨에 설정 가능
--컬럼레벨 유니크
CREATE TABLE MemberTbl(
    MEMBER_ID VARCHAR2(20) NOT NULL UNIQUE,  
    MEMBER_PWD VARCHAR2(20) NOT NULL,
    MEMBER_NAME VARCHAR2(20) NOT NULL
);
--테이블레벨 유니크
CREATE TABLE MemberTbl(
    MEMBER_ID VARCHAR2(20) NOT NULL,
    MEMBER_PWD VARCHAR2(20) NOT NULL,
    MEMBER_NAME VARCHAR2(20) NOT NULL,
    UNIQUE(MEMBER_ID)
);

@ PRIMARY KEY (기본키)
-> 테이블에서 한 행의 정보를 구분하기 위한 고유 식별자(Identifier) 역할을 함
-> NOT NULL의 의미와 UNIQUE의 의미를 둘 다 가지고 있으며 한 테이블당 1개만 설정
-> 컬럼 레벨과 테이블 레벨에서 둘 다 지정 가능

@ 복합키
-> 여러 컬럼을 묶어서 설정하는 기본키
-> PRIMARY KEY는 테이블당 1개만 설정 가능하기 때문에
    컬럼을 2개 이상 묶어서 PRIMARY KEY로 설정할 경우 복합키로 설정
-> 테이블레벨에서만 가능
CREATE TABLE MemberTbl(
    MEMBER_NO NUMBER,
    MEMBER_ID VARCHAR2(20) NOT NULL UNIQUE,
    MEMBER_PWD VARCHAR2(20) NOT NULL,
    MEMBER_NAME VARCHAR2(20) NOT NULL,
    PRIMARY KEY(MEMBER_NO, MEMBER_ID)
);

@ FOREIGN KEY (외래키)
-> 참조 무결성을 유지하기 위한 제약조건
-> 참조된 다른 테이블이 제공하는 값만 사용할 수 있도록 제한을 거는 것
-> 참조되는 컬럼과 참조된 컬러믕ㄹ 통해 테이블간의 관계가 형성됨
-> 해당 컬럼 값은 참조되는 테이블의 컬럼 값 중의 하나와 일치하거나
    NULL을 가질 수 있음
※ 참조된 컬럼 : 참조 대상이 되는 테이블의 컬럼
※ 참조하는 컬럼 : 참조 대상을 참조하는 테이블의 컬럼

## 데이터 삭제시!! 사용할 수 있는 옵션
-> 부모 테이블(참조되는 테이블)의 데이터 삭제 시 
자식 테이블(참조하는 테이블)의 데이터를 어떠한 방식으로 처리할지에 대한
내용을 제약조건 설정시 옵션으로 지정 할 수 있음

@ 옵션1 (널값삽입) - SET NULL
-> ON DELETE SET NULL
-> 부모 테이블의 데이터를 삭제 할 경우 자식 테이블의 데이터를 NULL로 변경

@ 옵션2 (연쇄) - CASCADE
-> ON DELETE CASCADE
-> 부모 테이블의 데이터를 삭제 시 자식 테이블의 데이터 연쇄 삭제

@ 옵션3 (제한) - RESTRICT
-> ON DELETE RESTRICT
-> 부모 테이블의 데이터를 어떤 테이블에서 참조하고 있을 때
    해당 데이터의 삭제를 제한한다.

@ CHECK 제약조건
-> 해당 컬럼에 데이터가 입력되거나 수정되는 값을 체크하여,
설정된 값 이외의 값이면 에러를 발생 시킴
-> 비교 연산자를 이용하여 조건을 설정하며, 비교값은
ex) GENDER VARCHAR2(3) CHECK(GENDER IN ('남','여'))

@ DEFAULT
-> 테이블 생성시 DEFAULT 설정을 할 수 있음
-> DEFAULT 값이 설정된 컬럼에는 DEFAULT로 설정하게 되면
설정된 기본값으로 셋팅되어 데이터가 삽입 됨

@ SUBQuery를 이용한 CREATE TABLE
-> 서브쿼리를 이용해서 SELECT의 조회 결과로 새롭게 테이블을 생성하는 방법
-> 컬럼명과 데이터 타입, 값이 복사되고, 제약조건은 NOT NULL만 복사 됨

@ DML (Data Manipulation Language)
-> DAta를 조작하기 위해 사용하는 언어 

@ INSERT 
-> 테이블의 새로운 행을 추가하는 구문
-> 추가할때마다 테이블의 행 개수가 증가

※사용 구문
INSERT INTO <테이블명> VALUES (입력데이터1, 입력데이터2, ...);
혹은
INSERT INTO <테이블명>(컬럼1,컬럼2,...) VALUES(입력데이터1, 입력데이터2,...);

ex)
INSERT INTO TEST_TBL VALUES(1,2,3,4,5); --순차적인 삽입
INSERT INTO TEST_TBL VALUES(1,5);  --삽입 불가 (컬럼개수는 5개)
INSERT INTO TEST_TBL(DATA1,DATA5)  VALUES(1,5); -- 해당 컬럼에 삽입

##INSERT시 VALUES 대신 서브쿼리 사용 가능
ex)
INSERT INTO EMP_01 
(SELECT E.EMP_ID, E.EMP_NAME, D.DEPT_TITLE
FROM EMPLOYEE E LEFT JOIN DEPARTMENT D
ON E.DEPT_CODE = D.DEPT_ID);

@INSERT ALL
-> INSERT시 사용하는 서브쿼리가 사용하는 테이블이 같은 경우, 두 개 이상의
테이블에 INSERT ALL을 이용하여 한번에 삽입 할 수 있음
-> 단, 서브쿼리의 조건절이 같아야 함

--INSERT ALL 예제
--2개의 테이블에 삽입할 데이터를 모두 EMPLOYEE테이블에서
--추출해서 사용하고 있다 이럴 때 사용하는 것이 바로 INSERT ALL
CREATE TABLE EMP_DEPT_D1 AS
    SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE
    FROM EMPLOYEE WHERE 1=0;

CREATE TABLE EMP_MANAGER AS
    SELECT EMP_ID, EMP_NAME, MANAGER_ID
    FROM EMPLOYEE WHERE 1=0;

INSERT ALL
INTO EMP_DEPT_D1 VALUES(EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE)
INTO EMP_MANAGER VALUES(EMP_ID, EMP_NAME, MANAGER_ID)
(SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE
,MANAGER_ID
FROM EMPLOYEE WHERE DEPT_CODE IN ('D1'));





##값은 복사하지 않고 데이터타입과 컬럼만 복사해서 테이블만들기
--WHERE절에 1=0 조건 추가
CREATE TABLE EMP_02 AS 
(SELECT E.EMP_ID, E.EMP_NAME,
E.SALARY, E.EMP_NO, D.DEPT_TITLE,
J.JOB_NAME FROM EMPLOYEE E 
LEFT JOIN DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_ID)
LEFT JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE)
WHERE 1=0 AND D.DEPT_TITLE IN ('회계관리부', '기술지원부'));


