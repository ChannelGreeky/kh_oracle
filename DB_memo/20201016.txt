@ UPDATE
-> 테이블에 기록된 컬럼의 값을 수정하는 구문
-> 테이블의 전체 행 개수에는 변화가 없음 (기존 데이터를 수정하는것)


UPDATE 테이블명 SET 컬럼 = '데이터' , 컬럼 = '데이터', ....
[WHERE 조건]

ex)

UPDATE DEPT_COPY SET DEPT_TITLE='인사부'
WHERE DEPT_ID = 'D1';


## UPDATE 구문에도 서브쿼리를 사용할 수 있음

ex) 서브쿼리를 활용한 데이터 수정
UPDATE EMP_COPY SET SALARY =    
            (SELECT SALARY FROM EMP_COPY
                WHERE EMP_NAME = '유재식')
    WHERE EMP_NAME = '방명수';


* 간단 실습
-- 방명수는 평상시 불만이 많던 사원
-- 유재식의 급여와 보너스 모두 탐나던 사원이라서 
-- 유재식과 똑같은 급여와 보너스율을 받고 싶다고 불만을 제기 했다.
-- UPDATE 구문을 이용하여 급여와 보너스율을 유재식과 같게 만들어 주자
-- (내년 퇴사 통보 예정)

UPDATE EMP_COPY 
    SET (SALARY,BONUS)  = 
    (SELECT SALARY,BONUS FROM EMP_COPY WHERE EMP_NAME='유재식')
     WHERE EMP_NAME = '방명수';






@ MERGE
-> 구조가 같은 두 개의 테이블을 하나의 테이블로 합치는 기능
-> 두 테이블에서 지정하는 조건의 값이 존재하면 UPDATE가 되고, 
조건의 값이 없으면 INSERT가 됨


ex)

SELECT * FROM MEMBER_TEST1;

MERGE INTO MEMBER_TEST1 USING MEMBER_TEST2 ON (MEMBER_TEST1.USER_ID =
                                        MEMBER_TEST2.USER_ID)
WHEN MATCHED THEN   --위에 ON이 참이라면
UPDATE SET MEMBER_TEST1.USER_NAME = MEMBER_TEST2.USER_NAME
WHEN NOT MATCHED THEN --위에 ON이 거짓이라면
INSERT VALUES (MEMBER_TEST2.USER_ID, MEMBER_TEST2.USER_NAME);

@ DELETE
-> 테이블의 행을 삭제하는 구문
-> 테이블의 행 개수가 줄어듦
-> DELETE 시에 조건문을 사용하지 않게 되면 Table의 
모든 데이터가 모두 삭제 될 수 있음
-> 외래키 제약조건이 설정되어 있는 경우 참조되고 있는 값은 삭제 할 수 없음


사용구문

DELETE FROM 테이블명
[WHERE 조건]

## 제약조건을 비활성화 하여 삭제 하는 방법

-- 제약조건 확인
SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, STATUS
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'M_BUY';

-- 제약 조건 비활성화
ALTER TABLE M_BUY DISABLE CONSTRAINT SYS_C007088;

-- 부모 테이블의 데이터 삭제 가능 (자식테이블에서 참조하고 있더라도 삭제 가능)
DELETE FROM MEMBER_T1 WHERE user_ID = 'user11';

-- 제약 조건 활성화
ALTER TABLE M_BUY ENABLE CONSTRAINT SYS_C007088; --실패
-> 제약조건을 활성화 시키려면 해당 제약조건의 위배되는 상황이 아니여야
다시 활성화가 가능함
(삭제된 데이터를 복구하던가.. 아니면 참조하는 데이터를 삭제 하던가 해야 함)

-- 삭제된 데이터 복구
INSERT INTO MEMBER_T1 VALUES (1,'user11','1234','홍길동');

-- 제약 조건 활성화
ALTER TABLE M_BUY ENABLE CONSTRAINT SYS_C007088; --성공




@ TRUNCATE
-> 테이블을 초기화 (전체 행을 삭제)
-> DELETE 문보다 수행 속도가 빠르지만, ROLLBACK을 통해 복구 불가
-> DELETE와 마찬가지로 FOREIGN KEY 제약조건일때에는 적용 불가

ex) DELETE 삭제시  (DML)
DELETE FROM 테이블명
-> 롤백 복구 가능

ex) TRUNCATE 삭제 (DDL)
-> TRUNCATE TABLE 테이블명
-> 롤백 복구 불가능

TABLE 안에 있는 데이터 중점 (테이블 안에 데이터를 삽입하고, 수정하고, 삭제)
-> INSERT, UPDATE, DELETE

TABLE을 중점으로 두는건 (테이블을 만들고,수정하고, 삭제)
-> CREATE, ALTER, DROP 


@ ALTER
-> 테이블에 정의된 내용을 수정 할 때 사용하는 데이터 정의어 (객체 정의)
-> 컬럼의 추가, 삭제, 제약 조건의 추가/삭제, 컬럼의 자료형 변경, 
DEFAULT값 변경(옵션) 테이블명/컬럼명/제약조건의 이름 변경 등을
할 수 있음


ex) 
-- 이미 만들어진 Table에 나이 컬럼을 추가 (ADD)
ALTER TABLE USERTBL ADD (USER_AGE VARCHAR2(20) DEFAULT 0);

-- 이미 만들어진 Table에 이름 컬럼을 추가 (ADD)
ALTER TABLE USERTBL ADD (USER_NAME VARCHAR2(20));

-> 확인하기 DESC USERTBL;

@ 제약 조건 추가
-> ALTER 구문을 이용하여 제약조건도 추가가 가능 함

-- USER_ID 에 유니크 제약조건 추가
ALTER TABLE USERTBL ADD CONSTRAINT USERTBL_UNIQUE UNIQUE (USER_ID);
(USERTBL_UNIQUE 는 제약조건의 이름)

-- 제약조건 확인 
SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE,TABLE_NAME FROM USER_CONSTRAINTS
WHERE TABLE_NAME='USERTBL';


ex) PWD의 NOT NULL 제약 조건 추가
-- PWD 에 NOT NULL 제약조건 추가 (NOT NULL 제약조건은 MODIFY로 해야 함)
ALTER TABLE USERTBL MODIFY USER_PWD
                CONSTRAINT USERTBL_NOT_NULL NOT NULL;


@ 컬럼명 수정
-> 이미 만들어진 테이블의 컬럼명을 수정할 수 있음

ex) USER_PWD 컬럼명을 USER_PASSWORD로 변경
ALTER TABLE USERTBL RENAME COLUMN USER_PWD TO USER_PASSWORD;


@ 컬럼의 데이터 타입 수정
-> 데이터 타입이나 DEFAULT 같은 옵션 수정이 가능

ex) -- USER_AGE에 DEFAULT 옵션 적용
ALTER TABLE USERTBL MODIFY USER_AGE DEFAULT 99;

ex) -- USER_NAME 을 VARCHAR2(20) 에서 VARCHAR2(30)으로 변경
ALTER TABLE USERTBL MODIFY USER_NAME VARCHAR2(30);

DESC USERTBL;  -- 확인



@ 컬럼 삭제
-> 해당 테이블에 생성되어 있는 컬럼을 삭제 할 수 있음

ex) -- USERTBL에 있는 USER_AGE 컬럼 삭제
ALTER TABLE USERTBL DROP COLUMN USER_AGE;


@ 제약 조건 삭제
-> 설정되어 있는 제약조건 삭제 

ex)
-- USER_PASSWORD에 있는 NOT NULL 제약 조건 삭제
-- (삭제시 제약조건의 이름을 이용하여 삭제)
ALTER TABLE USERTBL DROP CONSTRAINT USERTBL_NOT_NULL;



@ 제약 조건 이름 변경
-> 설정되어 있는 제약조건의 이름 변경

ex) -- 설정되어 있는 USER_NO의 PRIMARY KEY 제약조건 이름 변경
ALTER TABLE USERTBL RENAME CONSTRAINT 
                    SYS_C007089 TO USETBL_NO_PRI;


@ 테이블의 이름 변경
-> 테이블의 이름 변경도 가능

ex)
-- USERTBL 테이블명을 USER_TBL로 변경
ALTER TABLE USERTBL RENAME TO USER_TBL;
-- 또는
RENAME USERTBL TO USER_TBL;


@ 테이블 삭제

-> DROP TABLE 테이블명

ex) 
-- USER_TBL 테이블 삭제
DROP TABLE USER_TBL;


@ GRANT
-> 사용자 또는 ROLE에 대하여 권한을 부여 가능

ex) GRANT RESOURCE, CONNECT TO kh;
사용법
GRANT [System_Privilege|role] TO [user|role|PUBLIC]
		WITH ADMIN OPTION
	- System_privilege : 부여할 시스템 권한의 이름
	- role : 부여할 데이터베이스 역할의 이름
	- user,role : 부여할 사용자 이름과 다른 데이터베이스 역할 이름
	- PUBLIC : 시스템 권한, 또는 데이터베이스 역할을
		모든 사용자에게 부여
	- WITH ADMIN OPTION : 권한을 부여 받은 사용자도 
		부여받은 권한을 다른 사용자 또는 역할로 부여 가능

ex) -- 신규 계정 (test01)에 접속 권한 부여
GRANT CONNECT to test01;

ex) -- test01 사용자 계정에게 SELECT 권한 부여
GRANT SELECT ON KH.COFFEE TO test01;

ex) -- test01 사용자 계정에게 INSERT 권한 부여
GRANT INSERT ON KH.COFFEE TO test01;

@ REVOKE
-> 사용자 또는 ROLE에 대하여 권한 회수

ex) -- 동시에 여러개 권한 회수도 가능
REVOKE SELECT, INSERT ON KH.COFFEE FROM test01;

-- test01에 부여된 KH.COFFEE 테이블의 SELECT 권한 회수
REVOKE SELECT ON KH.COFFEE FROM test01;

-- test01에 부여된 KH.COFFEE 테이블의 INSERT 권한 회수
REVOKE INSERT ON KH.COFFEE FROM test01;


-- 계정별 부여된 롤 권한 확인 (대문자 쓰세요)
SELECT * FROM DBA_ROLE_PRIVS
WHERE GRANTEE = 'KH' ;

-- 계정별 부여된 테이블 권한 확인(대문자 쓰세요)
SELECT GRANTEE, OWNER, TABLE_NAME, PRIVILEGE, GRANTOR
 FROM DBA_TAB_PRIVS
 WHERE GRANTEE = 'TEST01';


@ TCL (Transaction Control Language)
-> 트랜잭션 제어 언어
-> COMMIT 과 ROLLBACK이 있음

@ 트랜잭션이란?
-> 한꺼번에 수행되어야 할 최소의 작업 단위
-> 하나의 트랜잭션으로 이루어진 작업들은 반드시 한꺼번에 완료가 되어야 하며,
그렇지 않은 경우 해당 작업은 모두 취소 되어야 함


ex) ATM 인출 처리 방식 (하나의 트랜잭션)


1. 카드 삽입
2. 메뉴 선택 및 비밀번호 입력
	-> 메뉴 잘못 선택 실패 (ROLLBACK)
3. (내부적으로) 통장의 비밀번호 및 잔고 확인
	-> 잘못된 비밀번호 실패 (ROLLBACk)
4. (내부적으로) 요청한 금액만큼 통장에서 인출
	-> 통장 잔고 부족 실패 (ROLLBACK)
5. 실제 현금 인출
	-> 잔액부족 실패 (ROLLBACK)
6. 완료 - COMMIT



@ 트랜잭션 SQL
-> 트랜잭션 제어에 사용하는 SQL은 TCL이라고 부름

COMMIT : 트랜잭션 작업이 정상 완료되면 변경 내용을 영구히 저장 
		(저장시 모든 savepoint 삭제)
SAVEPOINT <savepoint명> : 현재 트랜잭션 작업 시점에 이름을 지정
			하나의 트랜잭션 안에서 구역을 나눌 수 있음
ROLLBACK : 트랜잭션 작업을 모두 취소하고 최근 commit 시점으로 이동
ROLLBACK TO <savepoint명> : 트랜잭션 작업을 취소하고, savepoint 지점으로
			이동

-- 사용자가 돈을 인출 -> MONEYBOOK (돈 감소)
-- -> WITHDRAW (인출 기록) -> 완료 (COMMIT)

ex) 연습용 테이블 생성

CREATE TABLE WITHDRAW
(
    NO        NUMBER PRIMARY KEY,
    NAME      VARCHAR2(20) NOT NULL,
    WITHDRAW_MONEY NUMBER NOT NULL
);
CREATE TABLE MONEYBOOK(
    NO      NUMBER PRIMARY KEY,
    NAME    VARCHAR2(20) NOT NULL,
    MONEY   NUMBER NOT NULL
);

-- 연습용 데이터 삽입
INSERT INTO MONEYBOOK VALUES(1,'홍길동',500000);
INSERT INTO MONEYBOOK VALUES(2,'김말똥',100);
INSERT INTO MONEYBOOK VALUES(3,'고길똥',50);

COMMIT; -- 적용

-- 데이터 수정
UPDATE MONEYBOOK 
        SET 
        MONEY = MONEY - 100
        WHERE NAME = '김말똥';

SAVEPOINT sp1; -- 세이브 포인트 지점

-- 데이터 삽입
INSERT INTO WITHDRAW VALUES (2,'김말똥',-100);

SELECT * FROM WITHDRAW; -- 현재 삽입 된 상태

COMMIT; -- 모든 상황에 대한 적용 
ROLLBACK; -- 모든 상황을 되돌림 (마지막 commit 지점)
ROLLBACK to sp1; -- 세이브 포인트 지점으로 이동
