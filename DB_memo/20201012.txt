@ ORDER BY
-> SELECT 한 결과에 대해 정렬을 할 떄 사용하는 구문
-> SELECT 구문의 가장 마지막에 작성하며, 실행 순서도 가장 마지막에 수행 됨
-> 정렬 방식 ASC(ascending) : 오름차순 / DESC(descending) : 내림차순
※default는 오름차순(ASC)
ex)
SELECT * FROM EMPLOYEE ORDER BY EMP_NAME ASC;
-> EMP_NAME을 기준으로 오름차순 정렬

SELECT * FROM EMPLOYEE ORDER BY 3 ASC;
-> 3번째 컬럼을 기준으로 오름차순 정렬

@ 함수 (Function)
-> 하나의 큰 프로그램에서 반복적으로 사용되는 부분들을 분리하여 놓은 작은 서브프로그램으로,
호출하여 값을 전달하면 수행 결과를 리턴하는 방식의 코드
-> 값 전달 및 호출 -> 작업 수행 -> 결과 값 리턴

@ 함수의 유형
1. 단일 행 함수 : 각 행마다 반복적으로 적용되어 입력받은 행의 개수만큼 결과를 반환
-> 여러개 값 전달 및 호출 -> 작업 수행 -> 여러개 결과값 리턴

--------------------------------------문자열 처리 함수 종류--------------------------------------
# LENGTH -> 파라미터로 들어온 문자열의 문자 개수를 반환
# INSTR -> 찾는 문자(열)이 지정한 위치부터 지정한 회수만큼 나타난 시작 위치를 반환
# LPAD / RPAD -> 주어진 컬럼 문자열에 임의의 문자열을 왼쪽/오른쪽에 덧붙여 길이 N의 문자열을 반환하는 함수
# LTRIM / RTRIM -> 주어진 컬럼이나 문자열의 왼쪽 혹은 오른쪽에서 지정한 STR에 포함된 문자열을 잘라서 반환하는 함수
# TRIM -> 주어진 컬럼이나 문자열의 앞/뒤/양쪽에 있는 지정한 문자를 제거한 나머지를 반환
# SUBSTR - > 컬럼이나 문자열에서 지정한 위치부터 지정한 개수의 문자열을 잘라내어 리턴하는 함수
# LOWER / UPPER / INITCAP -> 컬럼의 문자 또는 문자열을 소문자/대문자/첫글자 만 대소문자로 변환하여 반환하는 함수
# CONCAT -> 컬럼의 문자 혹은 문자열을 두 개 전달 받아 하나로 합친 후 반환하는 함수
	  -> || 를 사용할 수도 있음
	  -> 만약 세개 이상의 컬럼(문자열타입, 숫자타입, 날짜타입)을 결합할 경우 ||를 사용 권장
# REPLACE -> 컬럼의 문자 혹은 문자열을 두개(변경할, 변경될)의 문자열 값을 전달받아 변경 후 반환하는 함수

	작성법		|	리턴값 타입	|		파라미터
───────────────────────────────────────────────
   LENGTH(COL | STRING) 	|	NUMBER 		|  	CHARACTER타입의 컬럼 
			|			|     	  또는 임의의 문자열
───────────────────────────────────────────────
  LENGTHB(COL | STRING) 	|	   BYTE 		|  	CHARACTER타입의 컬럼 
			|			|    	  또는 임의의 문자열
───────────────────────────────────────────────
			|			|   String : 문자 타입 컬럼 또는 문자열
			|			|   str : 찾으려는 문자(열)
      INSTR(String, str,	|	NUMBER		|   Position : 찾을 위치의 시작 값(기본값 1)
    [Position,[Occurrence]])	|			|   (Position 이 0이하면 끝부터 시작방향)
			|			|   Occurrence : 검색될 str의 순번
			|			|   (몇번째 str을 찾을건지)
───────────────────────────────────────────────
     			|			|   STRING : 문자 타입 컬럼 또는 문자열
    LPAD(STRING,N,[STR])	|			|   N : 반환할 문자(열)의 길이(BYTE)
	   또는		|         CHARACTER	|       원래 STRING길이보다 작다면 
    RPAD(STRING,N,[STR])	|			|        N만큼 잘라서 표시
			|			|   STR : 덧붙이려는 문자(열), 생략 시 공백문자
ex) SELECT LPAD(EMAIL, 20, '#') FROM EMPLOYEE;
-> 20바이트만큼 공간을 확보하고 EMAIL 문자열 출력하며 빈공간은 #으로 채움
───────────────────────────────────────────────
     LTRIM(STRNG,STR)	|        CHARACTER		|   STRING : 문자 타입 컬럼 또는 문자열
     RTRIM(STRNG,STR)	|			|   STR : 제거하려는 문자(열), 생략하면 공백
───────────────────────────────────────────────
        TRIM(STRING)	|        CHARACTER		|   STRING : 문자 타입 컬럼 또는 문자열
 TRIM(CHAR FROM STRING)	|        CHARACTER		|   CHAR : 제거하려는 문자, 생략하면 공백
 TRIM(LEADING | TRAILING	|			|   LEADING : 앞쪽
             | BOTH		|        CHARACTER		|   TRAILING : 뒤쪽
    CHAR FROM STRING)	| 			|   BOTH : 양쪽
───────────────────────────────────────────────
			|			|   STRING : 문자 타입 컬럼 또는 문자열
SUBSTR(STRING, POSITION, 	|        CHARACTER		|   POSITION : 문자열을 잘라낼 위치
	[LENGTH])	|			|   LENGTH : 반환할 문자의 개수(생략시 끝까지)
───────────────────────────────────────────────
        LOWER(STRING)	|        CHARACTER		|   LOWER는 모든 문자열을 소문자로
        UPPER(STRING)	|        CHARACTER		|   UPPER는 모든 문자열을 대문자로
        INITCAP(STRING)	|        CHARACTER		|   INITCAP는 문자열의 각 음절별 첫글자를 대문자로
───────────────────────────────────────────────
  CONCAT(STRING,STRING)	|        CHARACTER		|   STRING : 문자 타입 컬럼 또는 문자열
───────────────────────────────────────────────
			|        			|   STR : 문자 타입 컬럼 또는 문자열
 REPLACE(STR, STR1, STR2)	|        CHARACTER		|   STR1 : 변경 대상이 되는 문자 혹은 문자열
			|        			|   STR2 : 변경될 문자 혹은 문자열
───────────────────────────────────────────────

--------------------------------------숫자 처리 함수 종류--------------------------------------
# ABS -> 인자로 전달받은 숫자의 절대값을 구하는 함수
# MOD -> 인자로 전달받은 숫자를 나누어 나머지를 구하는 함수
# ROUND -> 인자로 전달받은 숫자 혹은 컬럼에서 지정한 위치이후 값을 반올림하여 값을 반환하는 함수
# FLOOR -> 인자로 전달받은 숫자 혹은 컬럼의 소수점을 버리는 함수
# TRUNC -> 인자로 전달받은 숫자 혹은 컬럼에서 지정한 위치이후 소수점 값을 버린 후 값을 반환하는 함수
# CEIL -> 인자로 전달받은 숫자 혹은 컬럼을 올림 계산하여 나온 값을 반환하는 함수

	작성법		|	리턴값 타입	|		파라미터
───────────────────────────────────────────────
        ABS(NUMBER) 	|	NUMBER 		|  Number타입의 컬럼 또는 임의의 숫자
───────────────────────────────────────────────
  MOD(NUMBER, DIVISION)	|	NUMBER		|  Number : 숫자 혹은 데이터 컬럼   	
			|			|  DIVISION : 나눌 수 혹은 나눌 숫자 데이터 컬럼
───────────────────────────────────────────────
  ROUND(NUMBER, 		|	NUMBER		|  NUMBER : 숫자 혹은 숫자 데이터 컬럼
	[POSITION])	|			|  POSITION : 표현될 데이터 자릿수
───────────────────────────────────────────────
       FLOOR(NUMBER)	|	NUMBER		|  NUMBER타입의 컬럼 또는임의의 숫자
───────────────────────────────────────────────
TRUNC(NUMBER,[POSITION])	| 	NUMBER		|  NUMBER : 숫자 혹은 숫자 데이터 컬럼
			|			|  POSITION : 표현될 데이터 자릿수
───────────────────────────────────────────────
        CEIL(NUMBER)	|	NUMBER		|  NUMBER 타입의 컬럼 또는 임의의 숫자
───────────────────────────────────────────────

--------------------------------------날짜 처리 함수 종류--------------------------------------
# SYSDATE -> 시스템에 저장되어 있는 현재 날짜를 반환하는 함수
	   -> 함수이지만 키워드 형태로 사용
	   -> 그 외 현재시간 명령어들 : CURRENT_DATE, LOCALTIMESTAMP, CURRENT_TIMESTAMP
# MONTHS_BETWEEN -> 인자로 날짜 두 개를 전달받아, 개월 수의 차이를 NUMBER형으로 리턴하는 함수
		     -> 계산시 해당 월의 끝의 날짜까지 계산
# ADD_MONTHS -> 인자로 전달받은 날짜에 인자로 전달받은 숫자만큼 개월 수를 더하여 특정 날짜를 반환하는 함수
# NEXT_DAY -> 인자로 전달받은 날짜에 인자로 전달받은 가장 가까운 다음 요일을 출력
 	    -> 인자로 현재날짜와 월요일을 적으면 오늘로부터 가장 가까운 월요일 날짜를 찾아 반환
# LAST_DAY -> 인자로 전달받은 날짜가 속한 달의 마지막 날짜를 구하여 반환
# EXTRACT -> 년, 월, 일 정보를 추출하여 반환하는 함수

	작성법		|	리턴값 타입	|		파라미터
───────────────────────────────────────────────
           SYSDATE		|	    없음		|		없음
───────────────────────────────────────────────
      MONTH_BETWEEN	|	 NUMBER		|  DATE1 : 기준이 되는 날짜를 입력
       (DATE1, DATE2)	|			|  DATE2 : 개월 수를 구하려는 날짜를 입력
───────────────────────────────────────────────
     ADD_MONTHS(DATE,	|	   DATE		|  DATE : 기준이 되는 날짜	
	NUMBER)		|			|  NUMBER : 더하려는 개월 수
───────────────────────────────────────────────
       NEXT_DAY(DATE,	|	   DATE		|  DATE : 기준이 되는 날짜
    STRING [OR NUMBER])	|			|  STRING OR NUMBER : 구하려는 요일 (1 = 일요일)
───────────────────────────────────────────────
       LAST_DAY(DATE)	|	   DATE		|  DATE : 기준이 되는 날짜
───────────────────────────────────────────────
EXTRACT(YEAR FROM DATE)	|			|
EXTRACT(month from date)	|	NUMBER		|  DATE : 기준이 되는 날짜
EXTRACT(DAY FROM DATE)	|			|

--------------------------------------형 변환 함수 종류--------------------------------------
	변환될		|	변환할		|		함수
───────────────────────────────────────────────
	NUMBER		|         CHARACTER	|             TO_CHAR(NUMBER,[FORMAT]
───────────────────────────────────────────────
         CHARACTER	|             DATE		|             TO_DATE(CHARACTER)
───────────────────────────────────────────────
	 DATE		|         CHARACTER	|             TO_CHAR(DATE,[FORMAT])
───────────────────────────────────────────────
         CHARACTER	|           NUMBER		|             TO_NUMBER(CHARACTER)

※일반적으로 숫자 ↔ 문자 ↔ 날짜 형태로 변경하여 쓴다.

@ TO_CHAR
-> 날짜형 데이터를 문자형 데이터로 변환하거나, 숫자데이터를 문자형 데이터로 변환하여 리턴
-> TO_CHAR(DATE,[FORMAT])
-> TO_CHAR(NUMBER,[FORMAT]

-DATE			문자형으로 변환하려는 날짜형 데이터
-NUMBER		문자형으로 변환하려는 숫자형 데이터
-FORMAT		문자형으로 변환시 지정할 출력 형식
	[DATE FORMAT]
	- YYYY		년도표시 (4자리)
	- YY		년도표시 (2자리)
	- MONTH	월표시
	- MM		월을 숫자로 표시
	- MON		월을 알파벳으로 표시
	- DD		날짜 표시
	- D		요일을 숫자로 표현 (1:일요일 ,...)
	- DAY		요일 표현
	- DY		요일을 약어로 표현
	
	- HH, HH12	시간(12시간으로 표현)
	- HH24		시간(24시간으로 표현)
	- MI		분
	- SS		초
	
	- AM,PM		오전, 오후 시
	- FM		월,일,시,분,초 앞의 0을 제거하고 표시
ex) 시간 FORMAT 예시
SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD-DAY/PM/HH12/MI/SS')
FROM DUAL;
	
	[NUMBER FORMAT]
	- ,(comma)	콤마 형식으로 변환 (ex. 9999 -> 9,999)	
	- .(period)	소수점 형식으로 변환 (ex. 9999 -> 99.99)
	- 0		왼쪽에 0을 삽입	(ex. 9999 -> 09999)
	- $		$통화로 표시	(ex. 9999 -> $9999)
	- L		Local 통화로 표시  (ex. 9999 -> \9999)
	- XXXX		16진수로 표시	(ex. 9999 -> 240F)
	※ 단위 표현시 0또는 9를 사용
	※ 숫자에서 문자로 표시할때에는 표현할 단위를 충분하게 주어야 함
	(단위 길이가 작으면 오류 발생하여 출력이 안됨)
	※ 예를들어 변환하려는 숫자의 단위가 백만단위인데 포맷을 10만단위까지 한경우 오류
ex)
SELECT EMP_NAME, TO_CHAR(SALARY,'L999,999,999')
FROM EMPLOYEE;
-- 단위 표현시에는 0또는 9를 사용할 수 있음
-- 0은 빈칸 발생시 0으로 채우고, 9는 빈칸 발생시 공백

@ TO_DATE
-> 숫자 혹은 문자형 데이터를 날짜형 데이터로 변환하여 리턴

TO_DATE(CHARACTER,[FORMAT])
TO_DATE(NUMBER,[FORMAT])

CHARACTER	|	날짜형으로 변환하려는 문자형 데이터
NUMBER		|	날짜형으로 변환하려는 숫자형 데이터	
FORMAT		|	날짜형으로 변환시 입력 포맷 


※ 오라클의 자동 형변환
SELECT '100' + '200' FROM DUAL;
--원래대로라면 문자끼리 연산을 하기 때문에 에러가 발생하겠지만
+(산술연산)를 통하여 문자이지만 숫자로 자동 형변환 하여 정상 연산 처리 (결과는 300출력)

@ NULL처리 함수 - NVL
-> NULL로 되어 있는 컬럼의 값을 지정한 숫자 혹은 문자로 변경하여 반환
-> NVL(P1, P2)
-> P1 : NULL데이터를 처리할 컬럼명 혹은 값
-> P2 : NULL데이터를 처리하고자 하는 값

@ DECODE - 선택 함수
-> 여러 가지 경우의 선택을 할 수 있는 기능을 제공
-> DECODE(표현식, 조건1, 결과1, 조건2, 결과2, 조건3, 결과3 ... DEFAULT)
표현식 : 값에 따라 선택을 따르게 할 컬럼 혹은 값 입력
조건 : 해당 값이 참인지 거짓인지 여부를 판단
결과 : 해당 조건과 일치하는 경우 결과를 리턴
DEFAULT : 모든 조건이 불일치시 리턴할 값

ex) SELECT EMP_NAME, EMP_NO, DECODE(SUBSTR(EMP_NO,8,1),1,'남',2,'여') AS 성별 FROM EMPLOYEE ORDER BY 성별 ASC;

@ CASE
-> 여러 가지 경우의 선택을 할 수 있는 기능 제공(범위 값도 가능)
[서식]
CASE
	WHEN 조건1 THEN 결과1
	WHEN 조건2 THEN 결과2
	WHEN 조건3 THEN 결과3
	....
	ELSE 결과 N
END

조건 : 해당 값이 참인지 거짓인지 여부를 판단
결과 : 해당 조건과 일치하는 경우 실행하는 결과
ELSE : 모든 조건이 불일치 시 리턴하는 결과

2. 그룹 함수 : 특정한 행들의 집합으로 그룹이 형성되어 적용 됨
-> 하나 이상의 행을 그룹으로 묶어 연산하여 총합, 평균 등을 하나의 컬럼으로 리턴하는 함수
-> 그룹당 1개의 결과를 반환
-> 여러개 값 전달 및 호출 -> 그룹 작업 수행 -> 1개의 결과값 리턴

@ SUM
-> 해당 컬럼들의 값들을 합쳐 총합을 구하는 함수

@ AVG
-> 해당 컬럼 값들의 평균을 구하는 함수

@ COUNT
-> 해당 컬럼 또는 테이블의 로우 개수를 반환하는 함수

@ MAX / MIN
-> 그룹의 최대값과 최소값을 구하여 리턴하는 함수