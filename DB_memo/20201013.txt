@ GROUP BY
-> 그룹함수는 단 한개의 결과값만 산출하기 때문에 그룹함수를 이용하여 여러개의 결과값을
    산출하기 위해서는 그룹함수가 적용될 그룹의 기준을 GROUP BY절에 기술하여 사용

@ HAVING 절
-> WHERE절에서는 집계함수를 사용할 수 없음 (SUM, AVG 등등)
-> GROUP BY 를 사용해서 그룹함수로 값을 구해올 조건을 설정할 때에는 HAVING절에 기술

@ ROLLUP과 CUBE
-> ROLLUP과 CUBE는 그룹별 집계를 표현하기 위한 용도로 사용

@ ROLLUP
-> 가장 먼저 지정한 그룹별 합계와 총 집계를 표현

ex) 부서내 직급별 인원정보 출력 (ROLLUP)
SELECT DEPT_CODE, JOB_CODE, COUNT(*)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
ORDER BY DEPT_CODE;

@ CUBE 
-> 그룹으로 지정된 모든 그룹에 대한 합계와 총 집계를 표현

ex) 부서내 직급별 인원정보 출력 (CUBE)
SELECT DEPT_CODE, JOB_CODE, COUNT(*)
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE)
ORDER BY DEPT_CODE;

@ JOIN 절
-> 여러 테이블의 레코드를 조합하여 하나의 열로 표현한 것
-> 두 개 이상의 테이블에서 연관성을 가지고 있는 테이블들을 따로 분류하여
 새로운 가상의 테이블을 이용하여 출력
-> 서로 다른 테이블에서 각각의 공통값을 이용함으로써 조합하여 결과를 출력할 수 있음

※ JOIN 구문은 컬럼명이 같을경우와 다를경우 사용법은 2가지가 있음
- Oracle 전용 구문
ex)
SELECT EMPLOYEE.EMP_ID, EMPLOYEE.EMP_NAME, 
EMPLOYEE.DEPT_CODE, DEPARTMENT.DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE EMPLOYEE.DEPT_CODE = DEPARTMENT.DEPT_ID
ORDER BY DEPT_CODE;

- ANSI 표준 구문(DBMS에 상관없이 공통적으로 사용하는 표준 SQL)
ex)
SELECT EMPLOYEE.EMP_ID, EMPLOYEE.EMP_NAME, 
EMPLOYEE.DEPT_CODE, DEPARTMENT.DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID) ORDER BY DEPT_CODE;

@ JOIN의 종류
- INNER JOIN (내부조인) : 교집합 (일반적인 JOIN)
- OUTER JOIN (외부조인) : 합집합
	=> LEFT OUTER JOIN (왼쪽 외부 조인)
	=> RIGHT OUTER JOIN (오른쪽 외부 조인)
	=> FULL OUTER JOIN (완전 외부 조인)

@ INNER JOIN (교집합)
-> 테이블 A와 테이블 B 모두 조건 구문에 일치하는 데이터만 반환
=> SELECT <컬럼> FROM <테이블 A> INNER JOIN <테이블 B> ON <조건 구문>;
ex)
SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE, JOB.JOB_NAME FROM EMPLOYEE 
INNER JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
INNER JOIN JOB ON EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

@ LEFT JOIN (교집합)
-> 테이블 A(왼쪽)와 테이블 B(오른쪽)를 조인한다고 가정했을때
	- 테이블 A 모두 출력
	- 테이블 B 는 조건 구문에 일치하는 데이터만 출력
ex)
SELECT EMP_NAME AS 이름, DEPT_TITLE AS 부서,
JOB.JOB_NAME AS 직급, SALARY
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
INNER JOIN JOB ON EMPLOYEE.JOB_CODE = JOB.JOB_CODE
ORDER BY 부서;


@ RIGHT JOIN (교집합)
-> 테이블 A(왼쪽)와 테이블 B(오른쪽)를 조인한다고 가정했을때
	- 테이블 B 모두 출력
	- 테이블 A 는 조건 구문에 일치하는 데이터만 출력
ex)
SELECT EMP_NAME AS 이름, DEPT_TITLE AS 부서
FROM EMPLOYEE 
RIGHT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;

@ FULL OUTER JOIN
-> 테이블 A, 테이블 B 조건 구문에 일치하는 모든 데이터 출력
ex)
SELECT EMP_NAME AS 이름, DEPT_TITLE AS 부서
FROM EMPLOYEE 
FULL JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;

@ CROSS JOIN(상호 조인)
-> 카테이션 곱 (Cartensian Product) 라고도 함
-> 조인되는 테이블의 각 행들이 모두 매핑된 데이터가 검색되는 조인 방법
-> A와 B를 서로 JOIN할 때, JOIN 조건을 생략하고 A테이블의 모든행이 B테이블의 모든 행들과 조인되는 경우
-> 한쪽 테이블의 모든 행과 다른쪽 테이블의 모든 행을 조인시킴
	-결과는 두 테이블의 컬럼 수를 곱한 개수가 나옴
-> 모든 경우의 수를 보고 싶을 때 사용

@ SELF JOIN
-> 조인은 두 개 이상의 서로 다른 테이블을 연결하기도 하지만,
같은 테이블을 조인하는 경우도 있음
-> 이러한 경우 자기 자신과 조인을 맺는것이라 하여 
SELF JOIN 이라고 함
ex)
SELECT E1.EMP_ID AS "사원 ID", 
E1.EMP_NAME AS "사원 이름",
E1.MANAGER_ID AS "사원의 매니저ID", 
E2.EMP_ID AS "매니저의 ID",
E2.EMP_NAME AS "매니저의 이름" 
FROM EMPLOYEE E1 JOIN EMPLOYEE E2 ON E1.MANAGER_ID = E2.EMP_ID;

@ 다중 JOIN
-> 여러 개의 조인문을 한번에 사용할 수 있는 것
※ 다중 JOIN을 사용할 때에는 조인의 유의해서 사용해야 한다.
(밑 예제 코드에서 LOCATION JOIN과 DEPARTMENT JOIN 순서를 바꾸면 정상작동 X)
ex)
SELECT E.EMP_NAME, D.DEPT_TITLE, 
L.NATIONAL_CODE, J.JOB_NAME
FROM EMPLOYEE E 
LEFT JOIN DEPARTMENT D ON E.DEPT_CODE = D.DEPT_ID
LEFT JOIN LOCATION L ON D.LOCATION_ID = L.LOCAL_CODE
JOIN JOB J ON E.JOB_CODE = J.JOB_CODE;