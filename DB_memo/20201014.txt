@ 집합 연산자 (Set Operator)
-> 두 개 이상의 테이블에서 조인을 사용하지 않고, 연관된 데이터를 조회하는 
방법
-> 여러 개의 질의의 결과를 연결하여 하나로 결합하는 방식
-> 각 테이빌의 조회 결과를 하나의 테이블에 합쳐서 반환
-> 조건
	- SELECT 절의 "컬럼 수가 동일" 해야 함
	- SELECT 절의 동일 위치에 존재하는 컬럼의 
	데이터 타입이 "상호 호환 가능" 해야 함

※ 사용 이유?
-> 여러개의 SQL 구문을 이용해서 하나의 테이블로 보여주기 위한 용도

-> UNION, UNION ALL, INTERSECT, MINUS 가 있음

A = {1,5,3,4,2}
B = {7,6,3,8,5,9,10}

UNION은 합집합
UNION : A∪B  = {1,2,3,4,5,6,7,8,9,10}
=> 중복된 데이터를 제거하고 첫번쨰 컬럼을 기준으로 오름차순으로 출력

UNION ALL : A∪B = {1,5,3,4,2,7,6,5,8,9,10} 
=> 중복된 데이터 제거작업 없이, 또 정렬 없이 있는 그대로 출력

INTERSECT : A∩B ={3,5} 
=> 공통된 요소만 보여줌 (교집합)

MINUS : A-B = {1,4,2}
=> A를 중점으로 B와 공통된 요소를 뺀 결과만 보여줌 (차집합)

@ UNION
-> UNION과 UNION ALL은 여러 개의 쿼리 결과를 하나로 합치는 연산자
-> UNION은 중복 제거를 함
-> UNION ALL은 중복 제거를 안함

ex) 각 각의 Query를 한번에 볼 수 있음

-- DEPT_CODE D5인 사람의 ID,이름,부서코드,급여 출력
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
UNION ALL
-- 급여가 300만원보다 큰 사람의 ID,이름,부서코드,급여 출력
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > 3000000;

@ INTERSECT
-> 여러 개의 SELECT 결과에서 공통된 부분만 결과로 출력

ex) 2개의 SELECT 결과물에 대한 공통된 요소만 출력

-- DEPT_CODE D5인 사람의 ID,이름,부서코드,급여 출력
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'

INTERSECT
-- 급여가 300만원보다 큰 사람의 ID,이름,부서코드,급여 출력
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > 3000000;

@ MINUS
-> 선행 SELECT 결과에서 다음 SELECT 결과와 겹치는 부분을 제외한
나머지 부분을 출력 (선행 SELCET 결과에서 없는것은 출력하지 않음)


ex) 2개의 SELECT 결과 중 공통 요소를 빼고, 선행 SELECT 결과물을 출력

-- DEPT_CODE D5인 사람의 ID,이름,부서코드,급여 출력
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'

MINUS
-- 급여가 300만원보다 큰 사람의 ID,이름,부서코드,급여 출력
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > 3000000;

@서브쿼리(Sub Query)
-> 하나의 SQL문 안에 포함되어 있는 또 다른 SQL구문
-> 알려지지 않은 조건에 근거한 값들을 검색하는 SELECT 문장을 작성하는데 유용함
-> 메인 쿼리가 서브쿼리를 포함하는 종속적인 관계
-> 서브쿼리는 반드시 소괄호로 묶어야함 (SELECT ... FROM ... WHERE)형태
-> 서브쿼리는 연산자의 오른쪽에 위치한다.
-> 서브쿼리 내에서 ORDER BY 문법은 지원하지 않음

@서브쿼리(SubQuery) 유형
1. 단일행 서브쿼리
2. 다중행 서브쿼리
3. 다중열 서브쿼리
4. 다중행 다중열 서브쿼리
5. 상관 서브쿼리        ---> 안배움
6. 스칼라 서브쿼리	    ---> 안배움

@ 단일행 서브쿼리
-> 서브쿼리의 조회 결과 값(행)의 개수가 1개일 때

@ 다중행 서브쿼리
-> 서브쿼리의 조회 결과 값(행)이 여러개 일 때
-> 다중행 서브쿼리 앞에는 일반 비교 연산자 사용 불가
	-사용 가능 연산자 : IN/NOT IN, ANY, ALL, EXISTS
- IN : 쿼리의 비교 조건이 결과 중에서 하나라도 일치하는 것(OR)
※ 서브쿼리의 결과가 여러개 이고, 여러개의 결과 중 아무거나 해당 될 때 사용하는 것이 IN

- ANY : 서브 쿼리의 결과 중에서 하나라도 참이면 참
	(범위를 표현하는 OR개념)
	> ANY : 최소값보다 크면
	>= ANY : 최소값보다 크거나 같으면
	< ANY : 최대값보다 작으면
	<= ANY : 최대값보다 작거나 같으면
	= ANY : IN과 같은 효과
	!= ANY : NOT IN 과 같은 효과
※ IN은 '='의 형태로 같다만 표현할 수 있지만 ANY를 쓰면 >,< 형태로도 사용이 가능
※ ANY는 서브쿼리로 나온 다중행의 결과 중 아무거나 해당되면! 이라는 뜻을 가지고 있음

- ALL : 서브쿼리의 결과 중 모두 참이면 참(ALL은  AND 개념) -> 모두 해당되어야 함
	> ALL : 최대값보다 크면
	>= ALL : 최대값보다 크거나 같으면
	< ALL : 최소값보다 작으면
	<= ALL : 최소값보다 작거나 같으면
	= ALL :  결과가 1개면 같은! 여러개면 오류 발생
	!= ALL :  결과가 1개면 같지 않은! 여러개면 오류 발생

- EXISTS : 서브쿼리의 결과 중에서 만족하는 값이 하나라도 존재하면 참
-> 해당되는 데이터가 있는지 없는지를 판단할 때 사용
(Table의 양이 많은 경우 모두 찾기 보다 있는지 여부를 파악하기 위해
사용하는 용도가 큼)
-> 단 하나의 데이터라도 있을 경우 작동 중지 됨 


@ 다중열 서브쿼리
-> 서브쿼리의 조회 결과 컬럼의 개수가 여러 개 일 때
	(행은 1개이고, 열이 여러개 인 경우)


@ 다중행 다중열 서브쿼리
-> 서브쿼리의 조회 결과 컬럼의 개수와 행의 개수가 여러개 일때
(사용 방법은 다중열 서브쿼리와 같음)